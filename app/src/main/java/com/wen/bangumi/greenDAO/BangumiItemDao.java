package com.wen.bangumi.greenDAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BANGUMI_ITEM".
*/
public class BangumiItemDao extends AbstractDao<BangumiItem, Long> {

    public static final String TABLENAME = "BANGUMI_ITEM";

    /**
     * Properties of entity BangumiItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Bangumi_id = new Property(1, int.class, "bangumi_id", false, "BANGUMI_ID");
        public final static Property Name_cn = new Property(2, String.class, "name_cn", false, "NAME_CN");
        public final static Property Air_weekday = new Property(3, Integer.class, "air_weekday", false, "AIR_WEEKDAY");
        public final static Property Large_image = new Property(4, String.class, "large_image", false, "LARGE_IMAGE");
    }


    public BangumiItemDao(DaoConfig config) {
        super(config);
    }
    
    public BangumiItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BANGUMI_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"BANGUMI_ID\" INTEGER NOT NULL ," + // 1: bangumi_id
                "\"NAME_CN\" TEXT," + // 2: name_cn
                "\"AIR_WEEKDAY\" INTEGER," + // 3: air_weekday
                "\"LARGE_IMAGE\" TEXT);"); // 4: large_image
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BANGUMI_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BangumiItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBangumi_id());
 
        String name_cn = entity.getName_cn();
        if (name_cn != null) {
            stmt.bindString(3, name_cn);
        }
 
        Integer air_weekday = entity.getAir_weekday();
        if (air_weekday != null) {
            stmt.bindLong(4, air_weekday);
        }
 
        String large_image = entity.getLarge_image();
        if (large_image != null) {
            stmt.bindString(5, large_image);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BangumiItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBangumi_id());
 
        String name_cn = entity.getName_cn();
        if (name_cn != null) {
            stmt.bindString(3, name_cn);
        }
 
        Integer air_weekday = entity.getAir_weekday();
        if (air_weekday != null) {
            stmt.bindLong(4, air_weekday);
        }
 
        String large_image = entity.getLarge_image();
        if (large_image != null) {
            stmt.bindString(5, large_image);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BangumiItem readEntity(Cursor cursor, int offset) {
        BangumiItem entity = new BangumiItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // bangumi_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name_cn
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // air_weekday
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // large_image
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BangumiItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBangumi_id(cursor.getInt(offset + 1));
        entity.setName_cn(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAir_weekday(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setLarge_image(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BangumiItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BangumiItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BangumiItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
